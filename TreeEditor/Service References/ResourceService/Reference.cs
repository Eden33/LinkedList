//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TreeEditor.ResourceService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ResourceService.IResourceService", CallbackContract=typeof(TreeEditor.ResourceService.IResourceServiceCallback))]
    public interface IResourceService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceService/Login", ReplyAction="http://tempuri.org/IResourceService/LoginResponse")]
        Model.Message.Response.LoginResponse Login(string loginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceService/Login", ReplyAction="http://tempuri.org/IResourceService/LoginResponse")]
        System.Threading.Tasks.Task<Model.Message.Response.LoginResponse> LoginAsync(string loginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceService/TryLock", ReplyAction="http://tempuri.org/IResourceService/TryLockResponse")]
        Model.Message.Response.LockResponse TryLock(int id, Model.Data.ItemType itemType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceService/TryLock", ReplyAction="http://tempuri.org/IResourceService/TryLockResponse")]
        System.Threading.Tasks.Task<Model.Message.Response.LockResponse> TryLockAsync(int id, Model.Data.ItemType itemType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceService/GetSingleItem", ReplyAction="http://tempuri.org/IResourceService/GetSingleItemResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Model.Message.Response.UpdateResponse))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Model.Data.CollectionPoint))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Model.Data.Client))]
        Model.Message.Response.SingleItemResponse GetSingleItem(int id, Model.Data.ItemType itemType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceService/GetSingleItem", ReplyAction="http://tempuri.org/IResourceService/GetSingleItemResponse")]
        System.Threading.Tasks.Task<Model.Message.Response.SingleItemResponse> GetSingleItemAsync(int id, Model.Data.ItemType itemType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceService/GetAllItems", ReplyAction="http://tempuri.org/IResourceService/GetAllItemsResponse")]
        Model.Message.Response.AllItemsResponse GetAllItems(Model.Data.ItemType itemType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceService/GetAllItems", ReplyAction="http://tempuri.org/IResourceService/GetAllItemsResponse")]
        System.Threading.Tasks.Task<Model.Message.Response.AllItemsResponse> GetAllItemsAsync(Model.Data.ItemType itemType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceService/UpdateItem", ReplyAction="http://tempuri.org/IResourceService/UpdateItemResponse")]
        Model.Message.Response.UpdateResponse UpdateItem(Model.Message.Request.UpdateRequest updateReq);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceService/UpdateItem", ReplyAction="http://tempuri.org/IResourceService/UpdateItemResponse")]
        System.Threading.Tasks.Task<Model.Message.Response.UpdateResponse> UpdateItemAsync(Model.Message.Request.UpdateRequest updateReq);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceService/DeleteItem", ReplyAction="http://tempuri.org/IResourceService/DeleteItemResponse")]
        Model.Message.Response.DeleteResponse DeleteItem(Model.Message.Request.DeleteRequest deleteReq);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceService/DeleteItem", ReplyAction="http://tempuri.org/IResourceService/DeleteItemResponse")]
        System.Threading.Tasks.Task<Model.Message.Response.DeleteResponse> DeleteItemAsync(Model.Message.Request.DeleteRequest deleteReq);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IResourceServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IResourceService/LockedNotification")]
        void LockedNotification(Model.Message.Push.LockMessage lockMsg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IResourceService/UpdateNotification")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Model.Data.CollectionPoint))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Model.Data.Client))]
        void UpdateNotification(Model.Message.Push.UpdateMessage updateMsg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IResourceService/DeleteNotification")]
        void DeleteNotification(Model.Message.Push.DeleteMessage deleteMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IResourceServiceChannel : TreeEditor.ResourceService.IResourceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceServiceClient : System.ServiceModel.DuplexClientBase<TreeEditor.ResourceService.IResourceService>, TreeEditor.ResourceService.IResourceService {
        
        public ResourceServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ResourceServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ResourceServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ResourceServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ResourceServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Model.Message.Response.LoginResponse Login(string loginName) {
            return base.Channel.Login(loginName);
        }
        
        public System.Threading.Tasks.Task<Model.Message.Response.LoginResponse> LoginAsync(string loginName) {
            return base.Channel.LoginAsync(loginName);
        }
        
        public Model.Message.Response.LockResponse TryLock(int id, Model.Data.ItemType itemType) {
            return base.Channel.TryLock(id, itemType);
        }
        
        public System.Threading.Tasks.Task<Model.Message.Response.LockResponse> TryLockAsync(int id, Model.Data.ItemType itemType) {
            return base.Channel.TryLockAsync(id, itemType);
        }
        
        public Model.Message.Response.SingleItemResponse GetSingleItem(int id, Model.Data.ItemType itemType) {
            return base.Channel.GetSingleItem(id, itemType);
        }
        
        public System.Threading.Tasks.Task<Model.Message.Response.SingleItemResponse> GetSingleItemAsync(int id, Model.Data.ItemType itemType) {
            return base.Channel.GetSingleItemAsync(id, itemType);
        }
        
        public Model.Message.Response.AllItemsResponse GetAllItems(Model.Data.ItemType itemType) {
            return base.Channel.GetAllItems(itemType);
        }
        
        public System.Threading.Tasks.Task<Model.Message.Response.AllItemsResponse> GetAllItemsAsync(Model.Data.ItemType itemType) {
            return base.Channel.GetAllItemsAsync(itemType);
        }
        
        public Model.Message.Response.UpdateResponse UpdateItem(Model.Message.Request.UpdateRequest updateReq) {
            return base.Channel.UpdateItem(updateReq);
        }
        
        public System.Threading.Tasks.Task<Model.Message.Response.UpdateResponse> UpdateItemAsync(Model.Message.Request.UpdateRequest updateReq) {
            return base.Channel.UpdateItemAsync(updateReq);
        }
        
        public Model.Message.Response.DeleteResponse DeleteItem(Model.Message.Request.DeleteRequest deleteReq) {
            return base.Channel.DeleteItem(deleteReq);
        }
        
        public System.Threading.Tasks.Task<Model.Message.Response.DeleteResponse> DeleteItemAsync(Model.Message.Request.DeleteRequest deleteReq) {
            return base.Channel.DeleteItemAsync(deleteReq);
        }
    }
}
